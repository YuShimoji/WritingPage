/*! Lite Sortable - Zen Writer custom pointer-based sortable */
(function (global) {
  'use strict';

  function assign(target) {
    if (typeof Object.assign === 'function') {
      return Object.assign.apply(Object, arguments);
    }
    var result = target || {};
    for (var i = 1; i < arguments.length; i += 1) {
      var src = arguments[i];
      if (!src) continue;
      for (var key in src) {
        if (Object.prototype.hasOwnProperty.call(src, key)) {
          result[key] = src[key];
        }
      }
    }
    return result;
  }

  var defaults = {
    handle: null,
    draggable: null,
    animation: 150,
    dragClass: '',
    ghostClass: '',
    onStart: null,
    onEnd: null
  };

  function SortableInstance(container, options) {
    if (!container) throw new Error('Sortable requires a container element');
    this._container = container;
    this._options = assign({}, defaults, options || {});
    this._handlePointerDown = this._handlePointerDown.bind(this);
    container.addEventListener('pointerdown', this._handlePointerDown);
    this._active = false;
    this._pointerId = null;
    this._dragEl = null;
    this._handle = null;
    this._placeholder = null;
    this._listeners = {};
    this._restore = null;
    this._offsetX = 0;
    this._offsetY = 0;
  }

  SortableInstance.prototype.destroy = function destroy() {
    if (this._active) {
      this._cancelDrag();
    }
    this._container.removeEventListener('pointerdown', this._handlePointerDown);
  };

  SortableInstance.prototype._matchesHandle = function _matchesHandle(target) {
    if (!this._options.handle) return target;
    return target.closest(this._options.handle);
  };

  SortableInstance.prototype._matchesDraggable = function _matchesDraggable(target) {
    if (!this._options.draggable) return target;
    return target.closest(this._options.draggable);
  };

  SortableInstance.prototype._handlePointerDown = function _handlePointerDown(event) {
    if (this._active) return;
    if (event.button !== undefined && event.button !== 0) return;
    var handle = this._matchesHandle(event.target);
    if (!handle || !this._container.contains(handle)) return;
    var draggable = this._matchesDraggable(handle);
    if (!draggable || !this._container.contains(draggable)) return;
    event.preventDefault();
    event.stopPropagation();
    this._startDrag(event, handle, draggable);
  };

  SortableInstance.prototype._startDrag = function _startDrag(event, handle, draggable) {
    this._active = true;
    this._pointerId = event.pointerId;
    this._handle = handle;
    this._dragEl = draggable;
    var rect = draggable.getBoundingClientRect();
    this._offsetX = event.clientX - rect.left;
    this._offsetY = event.clientY - rect.top;

    var placeholder = document.createElement('div');
    placeholder.className = 'sortable-placeholder';
    placeholder.style.height = rect.height + 'px';
    placeholder.style.width = rect.width + 'px';
    var style = window.getComputedStyle(draggable);
    placeholder.style.margin = style.margin;
    placeholder.style.borderRadius = style.borderRadius;
    placeholder.style.boxSizing = 'border-box';
    if (this._options.ghostClass) placeholder.classList.add(this._options.ghostClass);
    draggable.parentNode.insertBefore(placeholder, draggable);
    this._placeholder = placeholder;

    this._restore = {
      width: draggable.style.width,
      height: draggable.style.height,
      position: draggable.style.position,
      left: draggable.style.left,
      top: draggable.style.top,
      margin: draggable.style.margin,
      pointerEvents: draggable.style.pointerEvents,
      zIndex: draggable.style.zIndex,
      transition: draggable.style.transition
    };

    draggable.style.width = rect.width + 'px';
    draggable.style.height = rect.height + 'px';
    draggable.style.position = 'fixed';
    draggable.style.left = rect.left + 'px';
    draggable.style.top = rect.top + 'px';
    draggable.style.margin = '0';
    draggable.style.pointerEvents = 'none';
    draggable.style.zIndex = '1200';
    draggable.style.transition = 'transform ' + Math.max(0, Number(this._options.animation) || 0) + 'ms ease';
    if (this._options.dragClass) draggable.classList.add(this._options.dragClass);

    if (typeof this._options.onStart === 'function') {
      try { this._options.onStart({ item: draggable }); } catch (e) { /* ignore */ }
    }

    if (handle.setPointerCapture) {
      try { handle.setPointerCapture(this._pointerId); } catch (_) {}
    }

    this._listeners.move = this._handlePointerMove.bind(this);
    this._listeners.up = this._handlePointerUp.bind(this);
    window.addEventListener('pointermove', this._listeners.move, { passive: false });
    window.addEventListener('pointerup', this._listeners.up);
    window.addEventListener('pointercancel', this._listeners.up);
  };

  SortableInstance.prototype._handlePointerMove = function _handlePointerMove(event) {
    if (!this._active || event.pointerId !== this._pointerId) return;
    event.preventDefault();
    this._updateDragPosition(event);
    this._updatePlaceholder(event.clientY);
  };

  SortableInstance.prototype._handlePointerUp = function _handlePointerUp(event) {
    if (!this._active || event.pointerId !== this._pointerId) return;
    event.preventDefault();
    if (this._handle && this._handle.releasePointerCapture) {
      try { this._handle.releasePointerCapture(this._pointerId); } catch (_) {}
    }
    this._finishDrag();
  };

  SortableInstance.prototype._updateDragPosition = function _updateDragPosition(event) {
    if (!this._dragEl) return;
    var left = event.clientX - this._offsetX;
    var top = event.clientY - this._offsetY;
    this._dragEl.style.left = left + 'px';
    this._dragEl.style.top = top + 'px';
  };

  SortableInstance.prototype._updatePlaceholder = function _updatePlaceholder(pointerY) {
    if (!this._placeholder) return;
    var container = this._container;
    var options = this._options;
    var nodes = Array.prototype.slice.call(container.querySelectorAll(options.draggable || '*'));
    var placed = false;
    for (var i = 0; i < nodes.length; i += 1) {
      var node = nodes[i];
      if (node === this._dragEl || node === this._placeholder) continue;
      var rect = node.getBoundingClientRect();
      if (pointerY < rect.top + rect.height / 2) {
        if (node !== this._placeholder.nextSibling) {
          container.insertBefore(this._placeholder, node);
        }
        placed = true;
        break;
      }
    }
    if (!placed) {
      container.appendChild(this._placeholder);
    }
  };

  SortableInstance.prototype._finishDrag = function _finishDrag() {
    window.removeEventListener('pointermove', this._listeners.move, { passive: false });
    window.removeEventListener('pointerup', this._listeners.up);
    window.removeEventListener('pointercancel', this._listeners.up);

    if (this._placeholder && this._placeholder.parentNode) {
      this._placeholder.parentNode.insertBefore(this._dragEl, this._placeholder);
      this._placeholder.parentNode.removeChild(this._placeholder);
    }

    this._restoreStyles();

    var items = [];
    if (this._options.draggable) {
      items = Array.prototype.slice.call(this._container.querySelectorAll(this._options.draggable));
    } else {
      items = Array.prototype.slice.call(this._container.children);
    }
    var newIndex = items.indexOf(this._dragEl);

    if (typeof this._options.onEnd === 'function') {
      try { this._options.onEnd({ item: this._dragEl, newIndex: newIndex }); } catch (e) { /* ignore */ }
    }

    this._active = false;
    this._pointerId = null;
    this._dragEl = null;
    this._handle = null;
    this._placeholder = null;
  };

  SortableInstance.prototype._cancelDrag = function _cancelDrag() {
    window.removeEventListener('pointermove', this._listeners.move, { passive: false });
    window.removeEventListener('pointerup', this._listeners.up);
    window.removeEventListener('pointercancel', this._listeners.up);

    if (this._placeholder && this._placeholder.parentNode) {
      this._placeholder.parentNode.removeChild(this._placeholder);
    }
    this._restoreStyles();
    this._active = false;
    this._pointerId = null;
    this._dragEl = null;
    this._handle = null;
    this._placeholder = null;
  };

  SortableInstance.prototype._restoreStyles = function _restoreStyles() {
    if (!this._dragEl || !this._restore) return;
    this._dragEl.style.width = this._restore.width;
    this._dragEl.style.height = this._restore.height;
    this._dragEl.style.position = this._restore.position;
    this._dragEl.style.left = this._restore.left;
    this._dragEl.style.top = this._restore.top;
    this._dragEl.style.margin = this._restore.margin;
    this._dragEl.style.pointerEvents = this._restore.pointerEvents;
    this._dragEl.style.zIndex = this._restore.zIndex;
    this._dragEl.style.transition = this._restore.transition;
    if (this._options.dragClass && this._dragEl.classList.contains(this._options.dragClass)) {
      this._dragEl.classList.remove(this._options.dragClass);
    }
    this._restore = null;
  };

  function create(container, options) {
    return new SortableInstance(container, options || {});
  }

  var api = { create: create };
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = api;
  }
  if (global) {
    global.Sortable = api;
  }
})(typeof window !== 'undefined' ? window : this);